var now, ready, ref, ref1;

require('../scripts/vendor/mootools.js');

ready = require('../scripts/vendor/ready.js');

now = ((ref = window.performance) != null ? (ref1 = ref.now) != null ? ref1.bind(window.performance) : void 0 : void 0) || Date.now;

ready(function() {
  var button, capture, gif, info, sample, sampleInterval, sampleUpdate, startTime, timer, video;
  info = document.id('info');
  video = document.id('video');
  button = document.id('go');
  sample = document.id('sample');
  gif = new GIF({
    workers: 4,
    workerScript: 'gif.worker.js',
    width: 600,
    height: 337
  });
  startTime = null;
  sampleInterval = null;
  sampleUpdate = function() {
    sampleInterval = parseInt(sample.value);
    gif.abort();
    return document.id('info').set('text', "ready to start with a sample interval of " + sampleInterval + "ms");
  };
  video.addEventListener('canplay', function() {
    button.disabled = false;
    sample.disabled = false;
    return sampleUpdate();
  });
  sample.addEvent('change', sampleUpdate);
  button.addEvent('click', function() {
    video.pause();
    video.currentTime = 0;
    gif.abort();
    gif.frames = [];
    return video.play();
  });
  gif.on('start', function() {
    return startTime = now();
  });
  gif.on('progress', function(p) {
    return info.set('text', "rendering: " + (Math.round(p * 100)) + "%");
  });
  gif.on('finished', function(blob) {
    var delta, img;
    img = document.id('result');
    img.src = URL.createObjectURL(blob);
    delta = now() - startTime;
    return info.set('text', "done in\n" + ((delta / 1000).toFixed(2)) + "sec,\nsize " + ((blob.size / 1000).toFixed(2)) + "kb");
  });
  timer = null;
  capture = function() {
    info.set('html', "capturing at " + video.currentTime);
    return gif.addFrame(video, {
      copy: true,
      delay: sampleInterval
    });
  };
  video.addEventListener('play', function() {
    clearInterval(timer);
    return timer = setInterval(capture, sampleInterval);
  });
  return video.addEventListener('ended', function() {
    clearInterval(timer);
    return gif.render();
  });
});

// ---
// generated by coffee-script 1.9.2